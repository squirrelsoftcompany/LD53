[gd_scene load_steps=7 format=3 uid="uid://3n4ygfapfmnh"]

[ext_resource type="PhysicsMaterial" uid="uid://cnr64geca6o4o" path="res://materials/bouncy_physics.tres" id="1_c7f2t"]

[sub_resource type="GDScript" id="GDScript_7xj0i"]
resource_name = "character"
script/source = "extends RigidBody3D


var _local_gravity := Vector3.ZERO
var _local_gravity_scale := 0.0
var _move_direction := Vector3.ZERO
var _jumped := false
var _is_floating := false


@onready var _loadBody := $\"../Load\"
@onready var _base_gravity = ProjectSettings.get_setting(\"specific/gravity/base_gravity\", 9.8)
@onready var _rotation_speed = ProjectSettings.get_setting(\"specific/controls/rotation_speed\", 0)
@onready var _move_speed = ProjectSettings.get_setting(\"specific/controls/move_speed\", 0)
@onready var _jump_initial_impulse = ProjectSettings.get_setting(\"specific/controls/jump_initial_impulse\", 0)
@onready var _floating_threshold = ProjectSettings.get_setting(\"specific/controls/floating_threshold\", 0)
@onready var _audio_stream := $\"../AudioStreamPlayer\"

var _jump_sound := preload(\"res://audio/jump.wav\")
var _hit_the_floor_sound := preload(\"res://audio/hit_the_floor.wav\")

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


func _unhandled_input(event: InputEvent) -> void:
	if _is_floating:
		return
	if event.is_action_pressed(\"go_up\"):
		_jumped = true
		_audio_stream.stop()
		_audio_stream.stream = _jump_sound
		_audio_stream.play()


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	pass


func _integrate_forces(state: PhysicsDirectBodyState3D) -> void:
	_local_gravity_scale = state.total_gravity.length()
	_is_floating = _local_gravity_scale < _floating_threshold * _base_gravity
	_local_gravity = state.total_gravity.normalized() if not _is_floating else Vector3.ZERO
	var _up = -_local_gravity if not _is_floating else transform.basis.y

	_move_direction = compute_direction_and_rotate_towards(_up, state.step)

	if _jumped:
		apply_central_impulse(_up * mass * (_jump_initial_impulse + _local_gravity_scale))
		_loadBody.apply_central_impulse(_up * _loadBody.mass * (_jump_initial_impulse / 2 + _local_gravity_scale))
		_jumped = false

	apply_central_force(_move_direction * mass * _move_speed)
	_loadBody.apply_central_force(_move_direction * _loadBody.mass * _move_speed / 2)


func compute_direction_and_rotate_towards(up : Vector3, delta : float) -> Vector3:
	var move_forward = Input.get_action_strength(\"go_front\") - Input.get_action_strength(\"go_back\")
	var move_left = Input.get_action_strength(\"go_left\") - Input.get_action_strength(\"go_right\")
	var move_up = Input.get_action_strength(\"go_up\") - Input.get_action_strength(\"go_down\") if _is_floating else 0.0
	var forward_axis = transform.basis.x.cross(up)
	var left_axis = up.cross(forward_axis)
	
	var rotation_basis = Basis(left_axis, up, forward_axis).orthonormalized()
	var raw_input = Vector3(move_left, move_up, move_forward).normalized()
	var new_direction = rotation_basis * raw_input
	
	if raw_input.length() > 0.2 and abs(up.dot(new_direction)) < 0.98:
		var new_rotation_basis = Basis(up.cross(new_direction), up, new_direction).orthonormalized()
		transform.basis.slerp(new_rotation_basis, maxf(delta * _rotation_speed, 1))
	elif forward_axis.dot(transform.basis.z) < 0.90 :
		transform.basis.slerp(rotation_basis, maxf(delta * _rotation_speed, 1))
	
	return new_direction
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_xa7to"]

[sub_resource type="CapsuleMesh" id="CapsuleMesh_d3lnt"]

[sub_resource type="CylinderShape3D" id="CylinderShape3D_ebcbx"]
height = 1.0

[sub_resource type="BoxMesh" id="BoxMesh_dkt54"]

[node name="character" type="Node3D"]

[node name="LilGuy" type="RigidBody3D" parent="."]
unique_name_in_owner = true
collision_layer = 2
collision_mask = 241
mass = 80.0
physics_material_override = ExtResource("1_c7f2t")
script = SubResource("GDScript_7xj0i")

[node name="Shape" type="CollisionShape3D" parent="LilGuy"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.6, 0)
shape = SubResource("CapsuleShape3D_xa7to")

[node name="Mesh" type="MeshInstance3D" parent="LilGuy"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.6, 0)
mesh = SubResource("CapsuleMesh_d3lnt")

[node name="CameraArm" type="SpringArm3D" parent="LilGuy"]
transform = Transform3D(-1, -5.01437e-08, 7.16125e-08, 0, 0.819152, 0.573576, -8.74228e-08, 0.573577, -0.819152, 0, 1.2, 0)
collision_mask = 249
spring_length = 8.0
margin = 0.5

[node name="Camera3D" type="Camera3D" parent="LilGuy/CameraArm"]
transform = Transform3D(1, 0, 0, 0, 0.949972, -0.312335, 0, 0.312335, 0.949972, 0, 0, 8)
current = true

[node name="HingeLilGuyYLoad" type="HingeJoint3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 1, 0)
node_a = NodePath("../LilGuy")
node_b = NodePath("../Load")
angular_limit/enable = true
angular_limit/upper = 0.174533
angular_limit/lower = -0.174533

[node name="Load" type="RigidBody3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -2)
collision_layer = 2
collision_mask = 241
mass = 80.0
physics_material_override = ExtResource("1_c7f2t")

[node name="Shape" type="CollisionShape3D" parent="Load"]
transform = Transform3D(-8.74228e-08, -2, 0, 2, -8.74228e-08, 0, 0, 0, 2, 0, 0.6, 0)
shape = SubResource("CylinderShape3D_ebcbx")

[node name="Load" type="MeshInstance3D" parent="Load"]
transform = Transform3D(2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0.6, 0)
mesh = SubResource("BoxMesh_dkt54")
skeleton = NodePath("../../LilGuy")

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
