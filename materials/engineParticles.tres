[gd_resource type="VisualShader" load_steps=21 format=3 uid="uid://bqxpm3mu8g1lv"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_052rx"]
expanded_output_ports = [0]
input_name = "custom"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_m2v0w"]
input_name = "lifetime"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_jat8d"]
operator = 3

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_4v02m"]
input_name = "delta"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_r1a4e"]
expanded_output_ports = [0]
input_name = "custom"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_bp0ro"]
operator = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_7d3g6"]
input_name = "emission_transform"

[sub_resource type="VisualShaderNodeTransformDecompose" id="VisualShaderNodeTransformDecompose_ngmpp"]

[sub_resource type="VisualShaderNodeDotProduct" id="VisualShaderNodeDotProduct_3rlg5"]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_ylpx8"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(0, 0, 2)]
operator = 2

[sub_resource type="VisualShaderNodeCompare" id="VisualShaderNodeCompare_26cg4"]
default_input_values = [0, 0.0, 1, 0.5, 2, 1e-05]
function = 2

[sub_resource type="VisualShaderNodeParticleRandomness" id="VisualShaderNodeParticleRandomness_t2g8j"]
default_input_values = [1, Vector3(-0.1, -0.1, -0.1), 2, Vector3(0.1, 0.01, 0.1)]
op_type = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_acdhw"]

[sub_resource type="VisualShaderNodeClamp" id="VisualShaderNodeClamp_lwqom"]

[sub_resource type="VisualShaderNodeVectorFunc" id="VisualShaderNodeVectorFunc_0m3re"]

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_ynxtv"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_nfut1"]
parameter_name = "forceX"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_afilu"]
parameter_name = "forceY"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_bw47o"]
parameter_name = "forceZ"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_dq3dj"]
input_name = "lifetime"

[resource]
code = "shader_type particles;
uniform float forceX;
uniform float forceY;
uniform float forceZ;


float __rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float __rand_from_seed_m1_p1(inout uint seed) {
	return __rand_from_seed(seed) * 2.0 - 1.0;
}

float __randf_range(inout uint seed, float from, float to) {
	return __rand_from_seed(seed) * (to - from) + from;
}

uint __hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

mat3 __build_rotation_mat3(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat3(vec3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s), vec3(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s), vec3(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c));
}

mat4 __build_rotation_mat4(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat4(vec4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0), vec4(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0), vec4(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0), vec4(0, 0, 0, 1));
}

vec2 __get_random_unit_vec2(inout uint seed) {
	return normalize(vec2(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec3 __get_random_unit_vec3(inout uint seed) {
	return normalize(vec3(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec2 __randv2_range(inout uint seed, vec2 from, vec2 to) {
	return vec2(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y));
}

vec3 __randv3_range(inout uint seed, vec3 from, vec3 to) {
	return vec3(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y), __randf_range(seed, from.z, to.z));
}

vec4 __randv4_range(inout uint seed, vec4 from, vec4 to) {
	return vec4(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y), __randf_range(seed, from.z, to.z), __randf_range(seed, from.w, to.w));
}

void start() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// Input:11
		mat4 n_out11p0 = EMISSION_TRANSFORM;


// TransformDecompose:12
		vec3 n_out12p0 = n_out11p0[0].xyz;
		vec3 n_out12p1 = n_out11p0[1].xyz;
		vec3 n_out12p2 = n_out11p0[2].xyz;
		vec3 n_out12p3 = n_out11p0[3].xyz;


// FloatParameter:7
		float n_out7p0 = forceX;


// FloatParameter:8
		float n_out8p0 = forceY;


// FloatParameter:9
		float n_out9p0 = forceZ;


// VectorCompose:6
		vec3 n_out6p0 = vec3(n_out7p0, n_out8p0, n_out9p0);


// VectorFunc:23
		vec3 n_out23p0 = normalize(n_out6p0);


// DotProduct:13
		float n_out13p0 = dot(n_out12p2, n_out23p0);


// Compare:16
		float n_in16p1 = 0.50000;
		bool n_out16p0 = n_out13p0 > n_in16p1;


// Clamp:19
		float n_in19p1 = 0.00000;
		float n_in19p2 = 1.00000;
		float n_out19p0 = clamp(n_out13p0, n_in19p1, n_in19p2);


// VectorOp:14
		vec3 n_in14p1 = vec3(0.00000, 0.00000, 2.00000);
		vec3 n_out14p0 = vec3(n_out19p0) * n_in14p1;


// ParticleRandomness:17
		vec3 n_in17p1 = vec3(-0.10000, -0.10000, -0.10000);
		vec3 n_in17p2 = vec3(0.10000, 0.01000, 0.10000);
		vec3 n_out17p0 = __randv3_range(__seed, n_in17p1, n_in17p2);


// VectorOp:18
		vec3 n_out18p0 = n_out14p0 + n_out17p0;


// StartOutput:0
		ACTIVE = n_out16p0;
		if(ACTIVE) {
			VELOCITY = n_out18p0;
			if (RESTART_POSITION) {
				TRANSFORM = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(n_out17p0, 1.0));
				if (RESTART_VELOCITY) {
					VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
				}
				TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
			}
			TRANSFORM *= mat4(vec4(n_out13p0, 0, 0, 0), vec4(0, n_out13p0, 0, 0), vec4(0, 0, n_out13p0, 0), vec4(0, 0, 0, 1));
		}


	}
	
	{
// Input:2
		float n_out2p0 = LIFETIME;


// CustomStartOutput:0
		CUSTOM.a = n_out2p0;


	}
}

void process() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// Input:2
		vec4 n_out2p0 = CUSTOM;
		float n_out2p4 = n_out2p0.a;


// Input:3
		float n_out3p0 = LIFETIME;


// FloatOp:4
		float n_out4p0 = n_out2p4 / n_out3p0;


// ProcessOutput:0
		COLOR.a = n_out4p0;


	}
	
	{
// Input:3
		vec4 n_out3p0 = CUSTOM;
		float n_out3p4 = n_out3p0.a;


// Input:2
		float n_out2p0 = DELTA;


// FloatOp:4
		float n_out4p0 = n_out3p4 - n_out2p0;


// CustomProcessOutput:0
		CUSTOM.a = n_out4p0;


	}
}

"
graph_offset = Vector2(-82.3801, -260.944)
mode = 2
flags/collision_use_scale = false
flags/disable_force = false
flags/disable_velocity = false
flags/keep_data = false
nodes/start/0/position = Vector2(660, 140)
nodes/start/6/node = SubResource("VisualShaderNodeVectorCompose_ynxtv")
nodes/start/6/position = Vector2(-720, 0)
nodes/start/7/node = SubResource("VisualShaderNodeFloatParameter_nfut1")
nodes/start/7/position = Vector2(-1020, -240)
nodes/start/8/node = SubResource("VisualShaderNodeFloatParameter_afilu")
nodes/start/8/position = Vector2(-1020, -20)
nodes/start/9/node = SubResource("VisualShaderNodeFloatParameter_bw47o")
nodes/start/9/position = Vector2(-1020, 200)
nodes/start/11/node = SubResource("VisualShaderNodeInput_7d3g6")
nodes/start/11/position = Vector2(-780, -420)
nodes/start/12/node = SubResource("VisualShaderNodeTransformDecompose_ngmpp")
nodes/start/12/position = Vector2(-520, -420)
nodes/start/13/node = SubResource("VisualShaderNodeDotProduct_3rlg5")
nodes/start/13/position = Vector2(-220, -160)
nodes/start/14/node = SubResource("VisualShaderNodeVectorOp_ylpx8")
nodes/start/14/position = Vector2(140, 0)
nodes/start/16/node = SubResource("VisualShaderNodeCompare_26cg4")
nodes/start/16/position = Vector2(160, -360)
nodes/start/17/node = SubResource("VisualShaderNodeParticleRandomness_t2g8j")
nodes/start/17/position = Vector2(-180, 220)
nodes/start/18/node = SubResource("VisualShaderNodeVectorOp_acdhw")
nodes/start/18/position = Vector2(420, 100)
nodes/start/19/node = SubResource("VisualShaderNodeClamp_lwqom")
nodes/start/19/position = Vector2(-80, -40)
nodes/start/23/node = SubResource("VisualShaderNodeVectorFunc_0m3re")
nodes/start/23/position = Vector2(-420, -200)
nodes/start/connections = PackedInt32Array(9, 0, 6, 2, 8, 0, 6, 1, 7, 0, 6, 0, 11, 0, 12, 0, 12, 2, 13, 0, 17, 0, 18, 1, 17, 0, 0, 4, 13, 0, 19, 0, 19, 0, 14, 0, 18, 0, 0, 1, 14, 0, 18, 0, 13, 0, 16, 0, 13, 0, 0, 5, 6, 0, 23, 0, 23, 0, 13, 1, 16, 0, 0, 0)
nodes/process/2/node = SubResource("VisualShaderNodeInput_052rx")
nodes/process/2/position = Vector2(-220, 120)
nodes/process/3/node = SubResource("VisualShaderNodeInput_m2v0w")
nodes/process/3/position = Vector2(-200, 320)
nodes/process/4/node = SubResource("VisualShaderNodeFloatOp_jat8d")
nodes/process/4/position = Vector2(100, 160)
nodes/process/connections = PackedInt32Array(2, 4, 4, 0, 3, 0, 4, 1, 4, 0, 0, 3)
nodes/start_custom/2/node = SubResource("VisualShaderNodeInput_dq3dj")
nodes/start_custom/2/position = Vector2(-160, 240)
nodes/start_custom/connections = PackedInt32Array(2, 0, 0, 1)
nodes/process_custom/2/node = SubResource("VisualShaderNodeInput_4v02m")
nodes/process_custom/2/position = Vector2(-160, 340)
nodes/process_custom/3/node = SubResource("VisualShaderNodeInput_r1a4e")
nodes/process_custom/3/position = Vector2(-200, 140)
nodes/process_custom/4/node = SubResource("VisualShaderNodeFloatOp_bp0ro")
nodes/process_custom/4/position = Vector2(160, 160)
nodes/process_custom/connections = PackedInt32Array(3, 4, 4, 0, 2, 0, 4, 1, 4, 0, 0, 1)
